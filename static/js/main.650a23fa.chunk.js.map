{"version":3,"sources":["foogle.png","components/RecipeTag.js","components/Recipe.js","components/SearchBar.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RecipeTag","label","className","Recipe","title","image","ingredientLines","tags","source","url","cookingTime","noOfIng","length","Math","max","href","src","alt","map","t","key","random","ing","SearchBar","id","parentCallBack","require","onSubmit","e","preventDefault","keyword","document","getElementById","value","type","placeholder","minLength","autoComplete","Container","getRecipeURL","from","to","useState","recipes","setRecipes","searchTerm","setSearchTerm","getRecipe","a","fetch","headers","method","res","json","data","hits","window","alert","useEffect","console","log","recipe","dietLabels","healthLabels","forEach","dlabel","push","hlabel","totalTime","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.650a23fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/foogle.f7fe1a38.png\";","import React from 'react';\n\n\nconst RecipeTag = ({label}) => {\n    return (\n        <div className=\"recipe-tag\">\n            {label}\n        </div>\n    );\n};\n\nexport default RecipeTag;\n","import React from 'react';\nimport RecipeTag from './RecipeTag';\n\nconst Recipe = ({title, image, ingredientLines, tags, source, url, cookingTime}) => {\n    const noOfIng = ingredientLines.length;\n    cookingTime = Math.max(cookingTime, 20);\n    return(\n        <div className=\"recipe-container\">\n            <div className=\"recipe-title-short-desc\">\n                <span className=\"recipe-title\">{title}</span>\n                <br/>\n                <span className=\"recipe-short-desc\">\n    Cooking Time: ~{cookingTime} minutes &nbsp; &nbsp; Ingredients required: {noOfIng} &nbsp; &nbsp; Recipe: <a href={url}>{source}</a>\n                </span>\n            </div>\n            <br/>\n            <div className=\"centering recipeBox\">\n                <div className=\"centering\">\n                    <img src={image} alt={title}/>\n                        <div className=\"centering tag-container\">\n                            {tags.map((t: string) => (\n                                <RecipeTag key={t+''+Math.random()} label={t} />\n                            ))}\n                        </div>\n                </div>\n                <div className=\"centering ingredients\">\n                    <ul>\n                    {ingredientLines.map((ing) => (\n                        <li>\n                            {ing}\n                        </li>\n                    ))}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Recipe;","import React from 'react';\n\nconst SearchBar = ({id, parentCallBack}) => {\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let keyword = document.getElementById('recipeSearch-keyword').value;\n        parentCallBack(keyword);\n    };\n\n    return (\n    <div className=\"form-container\">\n      <a href=\"/foogle\" alt=\"Foogle\"><img src={require('../foogle.png')} alt=\"Foogle\" className=\"logo-foogle\"/></a>\n      <form id={id} className=\"search-form\" onSubmit={handleSubmit}>\n        <input id={function(){return id + '-keyword';}()} type=\"text\" className=\"search-bar\" placeholder=\"Enter any dish here...\" minLength=\"1\" autoComplete=\"off\"/>\n        <button id={function(){return id + '-button';}()} type=\"submit\" className=\"button-style-e\">\n          Search\n        </button>\n      </form>\n    </div>\n    );\n};\n\nexport default SearchBar;","import React, {useState, useEffect} from 'react';\nimport '../App.css';\nimport Recipe from './Recipe';\nimport SearchBar from './SearchBar';\n  \nconst Container = () => {\n    function getRecipeURL(keyword, from, to){\n        const API_KEY = '8baf31646a8d0037546284406907bb6d';\n        const application_ID = '0fd4faa5';\n        const url = 'https://api.edamam.com/search';\n        return url + `?q=${keyword}&app_id=${application_ID}&app_key=${API_KEY}&from=${from}&to=${to}`; \n    }\n    const [recipes, setRecipes] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const getRecipe = async(keyword, from, to) => {\n        if(keyword === ''){\n            return;\n        }\n        const res = await fetch(getRecipeURL(keyword, from, to), {\n        headers: {\n            'Accept-Encoding': 'gzip'\n        },\n        method: 'GET'\n        });\n        const data = await res.json();\n        if(data.hits.length > 0){\n            setRecipes(data.hits);    \n        }else{\n            window.alert(`No recipes found for ${keyword}. Please try another item.`);\n        }\n    };\n\n    const execute = (keyword) => {\n        setSearchTerm(keyword);\n        console.log(keyword);\n    };\n\n    useEffect(()=>{\n        getRecipe(searchTerm, 0, 50);\n    }, [searchTerm]);\n\n\n    return(\n        <div className=\"App\">\n        <SearchBar id=\"recipeSearch\" parentCallBack={execute}/>\n        <div className=\"recipeContainer\">\n            {recipes.map(recipe => (\n            <Recipe\n            key={recipe.recipe.label+''+ Math.random()}\n            title={recipe.recipe.label}\n            image={recipe.recipe.image}\n            ingredientLines={recipe.recipe.ingredientLines}\n            tags={\n                function (){\n                const dietLabels = recipe.recipe.dietLabels;\n                const healthLabels = recipe.recipe.healthLabels;\n                const tags = [];\n                dietLabels.forEach( dlabel => tags.push(dlabel));\n                healthLabels.forEach( hlabel => tags.push(hlabel));\n                return tags;\n                }()\n            }\n            source={recipe.recipe.source}\n            url={recipe.recipe.url}\n            cookingTime={recipe.recipe.totalTime}\n            />\n            ))}\n        </div>\n        </div>\n    );\n}\nexport default Container;\n  ","import React from 'react';\nimport './App.css';\nimport Container from './components/Container';\n\nconst App = () => {\n  return <Container />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}