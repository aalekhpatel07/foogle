{"version":3,"sources":["foogle.png","components/RecipeTag.js","components/Recipe.js","components/SearchBar.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RecipeTag","label","className","Recipe","title","image","ingredientLines","tags","source","url","cookingTime","noOfIng","length","Math","max","ceil","random","href","src","alt","map","t","key","ing","SearchBar","id","parentCallBack","require","onSubmit","e","preventDefault","keyword","document","getElementById","value","type","placeholder","minLength","autoComplete","Container","useState","recipes","setRecipes","searchTerm","setSearchTerm","getRecipe","a","searchButton","loadingIcon","searchBar","classList","toggle","disabled","fetch","headers","method","body","JSON","stringify","res","json","data","hits","window","alert","useEffect","onClick","scrollTop","documentElement","recipe","ingredients","addEventListener","mybutton","innerWidth","remove","add","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e9ede72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/foogle.f7fe1a38.png\";","import React from 'react';\n\n\nconst RecipeTag = ({label}) => {\n    return (\n        <div className=\"recipe-tag\">\n            {label}\n        </div>\n    );\n};\n\nexport default RecipeTag;\n","import React from 'react';\nimport RecipeTag from './RecipeTag';\n\nconst Recipe = ({title, image, ingredientLines, tags, source, url, cookingTime}) => {\n    const noOfIng = ingredientLines.length;\n    cookingTime = Math.max(cookingTime, Math.ceil(10 + Math.random()*20));\n    return(\n        <div className=\"recipe-container\">\n            <div className=\"recipe-title-short-desc\">\n                <span className=\"recipe-title\">{title}</span>\n                <br/>\n                <div className=\"recipe-short-desc-container\">\n                    <span className=\"recipe-short-desc\">\n                        Cooking Time: ~{cookingTime} minutes\n                    </span>\n                    <span className=\"recipe-short-desc\">\n                        Recipe: <a href={url}>\n                        {source}</a>\n                    </span>\n                    <span className=\"recipe-short-desc\">\n                        Ingredients required: {noOfIng}\n                    </span>\n                </div>\n            </div>\n            <br/>\n            <div className=\"centering recipeBox\">\n                <div className=\"centering\">\n                    <img src={image} alt={title}/>\n                        <div className=\"centering tag-container\">\n                            {tags.map((t) => (\n                                <RecipeTag key={t+''+Math.random()} label={t} />\n                            ))}\n                        </div>\n                </div>\n                <div className=\"centering ingredients\">\n                    <ul className=\"ingredients-list\">\n                    {ingredientLines.map((ing) => (\n                        <li key={ing+''+Math.random()}>\n                            {ing}\n                        </li>\n                    ))}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Recipe;","import React from 'react';\nimport { TailSpin } from 'svg-loaders-react';\nconst SearchBar = ({id, parentCallBack}) => {\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let keyword = document.getElementById('recipeSearch-keyword').value;\n        parentCallBack(keyword);\n    };\n\n    return (\n    <div className=\"form-container\">\n      <a href=\"/foogle\" alt=\"Foogle\"><img src={require('../foogle.png')} alt=\"Foogle\" className=\"logo-foogle\"/></a>\n      <form id={id} className=\"search-form\" onSubmit={handleSubmit}>\n        <input id={function(){return id + '-keyword';}()} type=\"text\" className=\"search-bar\" placeholder=\"Enter any dish here...\" minLength=\"1\" autoComplete=\"off\"/>\n        <button id={function(){return id + '-button';}()} type=\"submit\" className=\"button-style-e\">\n          Search\n        </button>\n        <div id={function(){return id + '-loadingIcon';}()} className=\"loading-svg d-none\">\n        <TailSpin/>\n      </div>\n      </form>\n    </div>\n    );\n};\n\nexport default SearchBar;","import React, {useState, useEffect} from 'react';\nimport '../App.css';\nimport Recipe from './Recipe';\nimport SearchBar from './SearchBar';\n  \nconst Container = () => {\n    const [recipes, setRecipes] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const getRecipe = async(keyword) => {\n        if(keyword === ''){\n            return;\n        }\n        let searchButton = document.getElementById('recipeSearch-button');\n        let loadingIcon = document.getElementById('recipeSearch-loadingIcon');\n        let searchBar = document.getElementById('recipeSearch-keyword');\n        searchButton.classList.toggle('d-none');\n        loadingIcon.classList.toggle('d-none');\n        searchBar.disabled = 'true';\n        const res = await fetch('http://localhost:1337/api/recipes', {\n        headers: {\n            'Accept-Encoding': 'gzip',\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n            keyword:keyword+\"\"\n        })\n        });\n        const data = await res.json();\n        searchButton.classList.toggle('d-none');\n        loadingIcon.classList.toggle('d-none');\n        searchBar.disabled = null;\n        if(data.hits.length === 0){\n            window.alert(`No recipes found for ${keyword}. Please try another item.`);\n        }else setRecipes(data.hits);    \n    };\n\n    const execute = (keyword) => {\n        setSearchTerm(keyword);\n        // console.log(keyword);\n    };\n\n    const topFunction = () => {\n        document.body.scrollTop = 0;\n        document.documentElement.scrollTop = 0;\n    };\n\n    useEffect(()=>{\n        getRecipe(searchTerm);\n    }, [searchTerm]);\n\n    return(\n        <div className=\"App\">\n        <SearchBar id=\"recipeSearch\" parentCallBack={execute}/>\n        <div className=\"recipeContainer\">\n            <div id=\"scrollButton\" className=\"scroll-button d-none\" onClick={topFunction}>\n                top\n            </div>\n            {recipes.map(recipe => (\n            <Recipe\n            key={recipe.title+''+ Math.random()}\n            title={recipe.title}\n            image={recipe.image}\n            ingredientLines={recipe.ingredients}\n            tags={recipe.tags}\n            source={recipe.source}\n            url={recipe.url}\n            cookingTime={recipe.cookingTime}\n            keyword={recipe.keyword}\n            />\n            ))}\n        </div>\n        </div>\n    );\n}\nexport default Container;\n  ","import React from 'react';\nimport './App.css';\nimport Container from './components/Container';\n\nconst scrollFunction = () =>{\n  let mybutton = document.getElementById(\"scrollButton\");\n  if (window.innerWidth < 414){\n    if (document.body.scrollTop > 400 || document.documentElement.scrollTop > 400) {\n        mybutton.classList.remove('d-none');\n      } else {\n        mybutton.classList.add('d-none');\n      }\n  }else{\n    if (document.body.scrollTop > 60 || document.documentElement.scrollTop > 60) {\n      mybutton.classList.remove('d-none');\n    } else {\n      mybutton.classList.add('d-none');\n    }\n  }\n};\n\nwindow.addEventListener('scroll', scrollFunction);\n\nconst App = () => {\n  return <Container />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}